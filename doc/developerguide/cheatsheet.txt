/*
    Copyright 2020 VUKOZ

    This file is part of 3D Forest.

    3D Forest is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    3D Forest is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with 3D Forest.  If not, see <https://www.gnu.org/licenses/>.
*/

/** @page cheatsheet Cheat Sheet

- @subpage cheatsheet_cmake
- @subpage cheatsheet_qtdesigner
- @subpage cheatsheet_rename_files
- @subpage cheatsheet_vscode_edit
- @subpage cheatsheet_vscode_debug

*******************************************************************************/

/** @page cheatsheet_cmake CMake Build Script

Example Windows build script executed from directory build:
@verbatim
cmake -G "MinGW Makefiles" .. -DCMAKE_INSTALL_PREFIX=.. -DCMAKE_BUILD_TYPE=Debug -DBUILD_EXAMPLES=ON
mingw32-make format
mingw32-make
mingw32-make install
mingw32-make doxygen
qhelpgenerator ..\doc\index.qhcp -o html\index.qhc
mkdir ..\bin\documentation
copy html\index.qhc ..\bin\documentation\
copy html\index.qch ..\bin\documentation\
@endverbatim

*******************************************************************************/

/** @page cheatsheet_qtdesigner Qt Designer

Conversion of '.ui' files to '.hpp' files by using 'uic' command line tool:
@verbatim
which uic
uic -o ui_window.h window.ui
@endverbatim

*******************************************************************************/

/** @page cheatsheet_rename_files Rename Files

Rename filenames:
@verbatim
powershell -C "gci | % {rni $_.Name ($_.Name -replace '24px', '24')}"
@endverbatim

*******************************************************************************/

/** @page cheatsheet_vscode_edit Edit Source Code with Visual Studio Code

-#  Download and install Visual Studio Code
    - For Windows or Linux from https://code.visualstudio.com/
    - Linux packages can be installed with: sudo apt install ./<downloaded>.deb
    - Tested with version 1.56.2.

-#  In file explorer, right-click on folder "3dforest2" and select
    "Open with Code". This will open 3D Forest workspace.

-#  Install extension "C/C++ IntelliSense, debugging, and code browsing".
    Extension identifier is "ms-vscode.cpptools". Tested with v1.4.0.

-#  Install extension "CMake Tools".
    Extension identifier is "ms-vscode.cmake-tools". Tested with v1.7.3.

-#  Optionally install extension "CMake langage support for Visual Studio Code".
    Extension identifier is "twxs.cmake".

-#  Optionally install extension "Code Spell Checker".
    Extension identifier is "streetsidesoftware.code-spell-checker".

-#  On Windows, add the following lines to "3dforest2/.vscode/settings.json"
    (compiler path and IntelliSense settings):
    @verbatim
    {
        "files.eol": "\n",
        "C_Cpp.default.includePath":[
            "C:/Qt/5.15.0/mingw81_64/include/**",
            "${workspaceRoot}/3rdparty/delaunator",
            "${workspaceRoot}/3rdparty/eigen",
            "${workspaceRoot}/3rdparty/libigl/include/**",
            "${workspaceRoot}/3rdparty/widgets/ctkrangeslider",
            "${workspaceRoot}/src/apps/3dforest",
            "${workspaceRoot}/src/apps/tools/sandbox",
            "${workspaceRoot}/src/core",
            "${workspaceRoot}/src/editor",
            "${workspaceRoot}/src/gui",
            "${workspaceRoot}/src/plugins/classifyground",
            "${workspaceRoot}/src/plugins/import",
            "${workspaceRoot}/src/plugins/projectfile",
            "${workspaceRoot}/src/plugins/segmentation",
            "${workspaceRoot}/src/plugins/viewer"]
    }
    @endverbatim

-# Close the window and reopen to the same folder to apply new settings.

*******************************************************************************/

/** @page cheatsheet_vscode_debug Build and Debug in Visual Studio Code

-#  Install GDB for msys2:
    - Open windows Command prompt "cmd".
    - Search for gdb to find a specific package in the repository:
      > pacman -Ss gdb
    - For example use the following command to install gdb package:
      > pacman -S mingw-w64-x86_64-gdb

-#  Open Visual Studio Code

-#  On Windows, Add the following lines to settings.json:
    @verbatim
    {
        "cmake.configureOnOpen": false,
        "cmake.mingwSearchDirs": [
            "C:\\msys64\\mingw-w64\\bin"
        ],
        "cmake.generator": "MinGW Makefiles",
    }
    @endverbatim

-#  Select a kit:
    - Open the Command Palette.
    - Run "CMake: Select a Kit".
    - Click "[Scan for kits]".
    - Select the compiler. For example "GCC 10.1.0 Using compilers:
      C= C:\msys64\mingw-w64\bin\gcc.exe, CXX= C:\msys64\mingw-w64\bin\g++.exe".

-#  Select a variant:
    - Open the Command Palette.
    - Run "CMake: Select Variant".
    - Select "Debug" to include debug information with your build.

-#  On Windows, create 'launch.json' (debugger settings, perform CMake build)
    in '.vscode' directory:
    @verbatim
    {
        "version": "0.2.0",
        "configurations": [
            {
                "name": "(gdb) Launch",
                "type": "cppdbg",
                "request": "launch",
                "program": "${workspaceFolder}/3dforest.exe",
                "args": [],
                "stopAtEntry": false,
                "cwd": "${workspaceFolder}",
                "environment": [],
                "externalConsole": false,
                "MIMode": "gdb",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "text": "-enable-pretty-printing",
                        "ignoreFailures": true
                    }
                ]
            }
        ]
    }
    @endverbatim

-#  You may also create file 'tasks.json' (build instructions)
    in '.vscode' directory:
    @verbatim
    {
        "version": "2.0.0",
        "command": "sh",
        "args": ["-c"],
        "presentation":
        {
            "echo": true,
            "reveal": "always",
            "focus": true,
            "panel": "new"
        },
        "tasks": [
            {
                "label": "cmake",
                "type": "shell",
                "options":
                {
                    "cwd": "${workspaceRoot}/build"
                },
                "args": ["cmake -G 'MinGW Makefiles' .. -DCMAKE_INSTALL_PREFIX=.."]
            },
            {
                "label": "make",
                "type": "shell",
                "args": ["mingw32-make"],
                "options": {"cwd": "${workspaceRoot}/build"},
                "dependsOn": ["cmake"],
                "group": {"kind": "build","isDefault": true}
            }
        ]
    }
    @endverbatim

-#  To build click "Build the selected target".

-#  Copy shared libraries to the same folder as "3dforest.exe":
    build\src\apps\3dforest\
    - lib3dforestcore.dll
    - lib3dforesteditor.dll
    - lib3dforestgui.dll

-#  To debug click "Launch the debugger for the selected target: [3dforest]".

*******************************************************************************/
