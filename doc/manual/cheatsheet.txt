/*
    Copyright 2020 VUKOZ

    This file is part of 3D Forest.

    3D Forest is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    3D Forest is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with 3D Forest.  If not, see <https://www.gnu.org/licenses/>.
*/

/** @page cheatsheet Cheat Sheet

- @subpage cheatsheet_git
- @subpage cheatsheet_build
- @subpage cheatsheet_code
- @subpage cheatsheet_cmake
- @subpage cheatsheet_doxygen
- @subpage cheatsheet_qtdesigner
- @subpage cheatsheet_vscode_edit
- @subpage cheatsheet_vscode_debug

*******************************************************************************/

/** @page cheatsheet_git Git

- Create your branch in GitHub if you like to make some changes:
  -# Open web page 'https://github.com/VUKOZ-OEL/3D-Forest_1.0'.
  -# Click on 'main' button.
  -# In 'Switch branches/tags' popup window:
    -# Select field 'Filter branches/tags':
    -# Type a name of your_branch.
    -# Hit enter.

- Get the source code:
  @verbatim
  git clone https://github.com/VUKOZ-OEL/3D-Forest_1.0.git
  @endverbatim

- Switch to your branch if you like to make some changes:
  @verbatim
  git checkout your_branch
  @endverbatim

- Merging 'main' into your branch is required before making contribution from
  your branch. Merging from 'main' may result to some unfortunate merge
  conflicts which are resolved manually.
  @verbatim
  # Checking latest changes in 'main'
  git checkout main
  git fetch
  git pull

  # Merging your_branch into 'main'
  git checkout your_branch
  git merge --no-ff -m "Merge branch 'main' into your_branch" main
  @endverbatim

- Merging your branch into 'main', contribution: (Pull requests later.)
  @verbatim
  git checkout main
  git merge --no-ff -m "Merge branch 'your_branch' into main" your_branch
  git push
  @endverbatim

- Common download sequence:
  @verbatim
  git checkout <branch>
  git fetch
  git pull
  @endverbatim

- Common upload/backup of your local changes to GitHub:
  @verbatim
  git branch
  git status
  git add <path>
  git add --all
  git commit -m "Added feature x"
  git push
  @endverbatim

*******************************************************************************/

/** @page cheatsheet_build Build

@section Prerequisites

The code uses C++17 and CMake.
Qt5 and OpenGL are required for GUI application.


@section Variants
- @subpage cheatsheet_build_windows_make

*******************************************************************************/

/** @page cheatsheet_build_windows_make Build Using "Unix Makefiles" on Windows

-#  Installation of msys2 and mingw-w64
    - Open https://www.msys2.org/ and follow Installation instructions
    - Default installation will create "C:\msys64"

-#  Setup Windows PATH variable
    - Run "systempropertiesadvanced" from the search box
    - Click "Environment Variables"
    - In "System variables" select "Path" and click "Edit..."
    - Click "New" and add "C:\msys64\usr\bin", hit enter
    - Click "New" and add "C:\msys64\usr\local\bin", hit enter
    - Click "New" and add "C:\msys64\mingw64\bin", hit enter
    - "Move Up" these three new items to top

-#  Run "MSYS2 MSYS" Windows application and install additional packages
    - Required
      @verbatim
        $ pacman -S mingw-w64-x86_64-clang
        $ pacman -S mingw-w64-x86_64-cmake
        $ pacman -S mingw-w64-x86_64-make
      @endverbatim
    - Optional
      @verbatim
        $ pacman -S mingw-w64-x86_64-python
        $ pacman -S mingw-w64-x86_64-python-pip
        $ pacman -S mingw-w64-x86_64-doxygen
        $ pacman -S mingw-w64-x86_64-graphviz
      @endverbatim

-#  Install Qt
    - Download Qt installer
    - Run the installer
    - Run "systempropertiesadvanced" from the search box
    - Click "Environment Variables"
    - In "System variables" select "Path" and click "Edit..."
    - Click "New" and add "C:\Qt\5.15.0\mingw81_64\bin", hit enter

-#  Open "cmd" terminal, navigate to the project folder and build it
    - Build
      @verbatim
        > mkdir build
        > cd build
        > cmake -G "MinGW Makefiles" .. -DCMAKE_INSTALL_PREFIX=..
        > mingw32-make
        > mingw32-make install
      @endverbatim
    - Run
        executables can be found in directory bin

*******************************************************************************/

/** @page cheatsheet_code Code style

Automatic formatting. It is good to run this command before 'git add <file>'
and git commit to GitHub:
@verbatim
mingw32-make format
@endverbatim

The code is using C++ std on Backend and Qt on Frontend.

Function names follow mixed Qt style and std:
@verbatim
get:
    bool   hasFocus() const;
    bool   isHidden() const;
    int    height() const;
    size_t size() const; // Can be better than Qt like 'count'. std uses 'size'.

get/set:
    bool isSizeGripEnabled() const;
    void setSizeGripEnabled(bool);

    int  result() const;
    void setResult(int i);

signals:
    void accepted();
    void finished(int result);
    void rejected();
@endverbatim

Debug:
@verbatim
#include <QDebug>
qDebug() << "error:" << e.what();
@endverbatim

*******************************************************************************/

/** @page cheatsheet_cmake CMake

Example build script executed from directory build:
@verbatim
cmake -G "MinGW Makefiles" .. -DCMAKE_INSTALL_PREFIX=.. -DCMAKE_BUILD_TYPE=Debug -DBUILD_EXAMPLES=ON
mingw32-make format
mingw32-make
mingw32-make install
@endverbatim

*******************************************************************************/

/** @page cheatsheet_doxygen Doxygen

Example command to generate documentation:
@verbatim
mingw32-make doxygen
@endverbatim

Your favorite syntax of documentation comments.

Suggestions:
@verbatim
/** First paragraph is automatically brief

    <detail description>

    @todo Documentation is not complete.
*/

int value; /**< field description, after */

/** Link to function foo() */
/** Link to parameter @e value */
void foo(value);

[in], [out], [in,out] for parameters:
/** @param [in] milliseconds sleep until milliseconds have elapsed. */
void msleep(long milliseconds);

Group 'Point Data' creates hierarchy in generated output:
    /** @name Point Data */
    /**@{*/

    /** Point coordinates. */
    std::vector<double> xyz;

    /** Pulse return magnitude. */
    std::vector<float> intensity;

    /**@}*/

Examples:
/** JSON.

@example
    Json obj;
    obj["name"] = "John";
    std::cout << obj << "\n"; // Output: {"name":"John"}
@endexample
*/

/**
    @section
    @subsection
*/

/** @file Window.hpp */
/** @class Window.cpp::Window

    Documenting another file.
*/
@endverbatim

*******************************************************************************/

/** @page cheatsheet_qtdesigner Qt Designer

Conversion of '.ui' files to '.hpp' files by using 'uic' command line tool:
@verbatim
which uic
uic -o ui_window.h window.ui
@endverbatim

*******************************************************************************/

/** @page cheatsheet_vscode_edit Edit Source Code with Visual Studio Code

-#  Download and install Visual Studio Code from https://code.visualstudio.com/
    Tested with version 1.56.2.

-#  In file explorer, right-click on folder "3D-Forest_1.0" and select
    "Open with Code". This will open 3D Forest workspace.

-#  Install extension "C/C++ IntelliSense, debugging, and code browsing".
    Extension identifier is "ms-vscode.cpptools". Tested with v1.4.0.

-#  Install extension "CMake Tools".
    Extension identifier is "ms-vscode.cmake-tools". Tested with v1.7.3.

-#  Optionally install extension "CMake langage support for Visual Studio Code".
    Extension identifier is "twxs.cmake".

-#  Optionally install extension "Code Spell Checker".
    Extension identifier is "streetsidesoftware.code-spell-checker".

-#  Add the following lines to "3D-Forest_1.0/.vscode/settings.json"
    (compiler path and IntelliSense settings):
    @verbatim
    {
        "files.eol": "\n",
        "cmake.configureOnOpen": false,
        "cmake.mingwSearchDirs": [
            "C:\\msys64\\mingw-w64\\bin"
        ],
        "cmake.generator": "MinGW Makefiles",
        "C_Cpp.default.includePath":[
            "C:/Qt/5.15.0/mingw81_64/include/**",
            "${workspaceRoot}/3rdparty/widgets/ctkrangeslider",
            "${workspaceRoot}/3rdparty/widgets/qtribbonwidget",
            "${workspaceRoot}/modules/visualization/src/editor",
            "${workspaceRoot}/modules/visualization/src/opengl",
            "${workspaceRoot}/modules/visualization/src/widgets",
            "${workspaceRoot}/modules/applications/3dforest/src",
            "${workspaceRoot}/modules/applications/3dforest/plugins/heightmap",
            "${workspaceRoot}/modules/applications/console/src",
            "${workspaceRoot}/modules/core/src/common",
            "${workspaceRoot}/modules/core/src/io",
            "${workspaceRoot}/modules/core/src/scene",
            "${workspaceRoot}/modules/editor/src"]
    }
    @endverbatim

-# Close the window and reopen to the same folder to apply new settings.

*******************************************************************************/

/** @page cheatsheet_vscode_debug Build and Debug in Visual Studio Code

-#  Install GDB for msys2:
    - Open windows Command prompt "cmd".
    - Search for gdb to find a specific package in the repository:
      > pacman -Ss gdb
    - For example use the following command to install gdb package:
      > pacman -S mingw-w64-x86_64-gdb

-#  Open Visual Studio Code

-#  Add the following lines to settings.json:
    @verbatim
    {
        "cmake.configureOnOpen": false,
        "cmake.mingwSearchDirs": [
            "C:\\msys64\\mingw-w64\\bin"
        ],
        "cmake.generator": "MinGW Makefiles",
    }
    @endverbatim

-#  Select a kit:
    - Open the Command Palette.
    - Run "CMake: Select a Kit".
    - Click "[Scan for kits]".
    - Select the compiler. For example "GCC 10.1.0 Using compilers:
      C= C:\msys64\mingw-w64\bin\gcc.exe, CXX= C:\msys64\mingw-w64\bin\g++.exe".

-#  Select a variant:
    - Open the Command Palette.
    - Run "CMake: Select Variant".
    - Select "Debug" to include debug information with your build.

-#  Create file 'launch.json' (debugger settings, perform CMake build)
    in '.vscode' directory:
    @verbatim
    {
        "version": "0.2.0",
        "configurations": [
            {
                "name": "(gdb) Launch",
                "type": "cppdbg",
                "request": "launch",
                "program": "${workspaceFolder}/3dforest.exe",
                "args": [],
                "stopAtEntry": false,
                "cwd": "${workspaceFolder}",
                "environment": [],
                "externalConsole": false,
                "MIMode": "gdb",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "text": "-enable-pretty-printing",
                        "ignoreFailures": true
                    }
                ]
            }
        ]
    }
    @endverbatim

-#  You may also create file 'tasks.json' (build instructions)
    in '.vscode' directory:
    @verbatim
    {
        "version": "2.0.0",
        "command": "sh",
        "args": ["-c"],
        "presentation":
        {
            "echo": true,
            "reveal": "always",
            "focus": true,
            "panel": "new"
        },
        "tasks": [
            {
                "label": "cmake",
                "type": "shell",
                "options":
                {
                    "cwd": "${workspaceRoot}/build"
                },
                "args": ["cmake -G 'MinGW Makefiles' .. -DCMAKE_INSTALL_PREFIX=.."]
            },
            {
                "label": "make",
                "type": "shell",
                "args": ["mingw32-make"],
                "options": {"cwd": "${workspaceRoot}/build"},
                "dependsOn": ["cmake"],
                "group": {"kind": "build","isDefault": true}
            }
        ]
    }
    @endverbatim

-#  To build click "Build the selected target".

-#  Copy shared libraries to the same folder as "3dforest.exe":
    build\modules\applications\3dforest\
    - libcore.dll
    - libeditor.dll
    - libvisualization.dll

-#  To debug click "Launch the debugger for the selected target: [3dforest]".

*******************************************************************************/
